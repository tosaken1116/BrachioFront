/**
 * This file was auto-generated by openapi-typescript.
 * Do not make direct changes to the file.
 */

export interface paths {
    "/cards": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * 所持カード一覧取得
         * @description 所持カード一覧を取得します。
         */
        get: operations["getMyCardList"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/cards/{cardNumber}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * カード取得
         * @description カードを取得します。
         */
        get: operations["getMyCard"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/decks": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * デッキ一覧取得
         * @description デッキ一覧を取得します。
         */
        get: operations["getMyDeckList"];
        put?: never;
        /**
         * デッキ作成
         * @description デッキを作成します。
         */
        post: operations["postMyDeck"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/decks/{deckId}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * デッキ取得
         * @description デッキを取得します。
         */
        get: operations["getMyDeck"];
        /**
         * デッキ編集
         * @description デッキを編集します。
         */
        put: operations["putMyDeck"];
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/gachas": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * ガチャ一覧取得
         * @description ガチャ一覧を取得します。
         */
        get: operations["getGachaList"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/gachas/{gachaId}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * ガチャを引く
         * @description ガチャを引いてカードを取得します。
         */
        post: operations["postGachaDraw"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/items": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * 所持アイテム一覧取得
         * @description 所持アイテム一覧を取得します。
         */
        get: operations["getMyItemList"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/pack-power": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * パックパワーの溜まり状況取得
         * @description パックパワーの溜まり状況を取得します。
         */
        get: operations["getPackPower"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
}
export type webhooks = Record<string, never>;
export interface components {
    schemas: {
        CardBase: {
            /** @description 全ユーザーで一意に定まるID */
            readonly id?: string;
            /** @description カード名 */
            name?: string;
            /** @description レアリティ */
            rarity?: number;
            /** @description カードナンバー */
            cardNumber?: number;
            /** @description 拡張パック名 */
            expansion?: string;
            /**
             * @description カードタイプ
             * @enum {string}
             */
            cardType?: "Monster" | "Supporter" | "Goods";
            /**
             * Format: uri
             * @description カード画像URL
             */
            imageUrl?: string;
        };
        Deck: {
            /** @description デッキID */
            readonly id?: string;
            /** @description デッキ名 */
            name?: string;
            /** @description エネルギーの属性 */
            elements?: components["schemas"]["Element"][];
            /** @description カードリスト */
            cards?: components["schemas"]["Card"][];
        };
        CreateDeckRequest: {
            /** @description デッキ名 */
            name?: string;
            /** @description エネルギーの属性 */
            elements?: components["schemas"]["Element"][];
            /** @description カードIDリスト */
            cardIds?: string[];
        };
        /**
         * @description 属性
         * @enum {string}
         */
        Element: "Grass" | "Fire" | "Water" | "Lightning" | "Psychic" | "Fighting" | "Darkness" | "Metal" | "Dragon" | "Normal";
        Gacha: {
            /** @description ガチャID */
            readonly id?: string;
            /** @description ガチャ名 */
            name?: string;
            /**
             * Format: uri
             * @description ガチャ画像URL
             */
            imageUrl?: string;
        };
        Item: {
            /** @description アイテムID（アイテムごとに一意） */
            id?: string;
            /** @description アイテム名 */
            name?: string;
            /** @description 所持数 */
            count?: number;
        };
        /** @description カード5枚セット */
        Pack: {
            /** @description 中身 */
            cards?: components["schemas"]["Card"][];
        };
        GachaDrawRequest: {
            /** @description 10連ガチャかどうか */
            isTenDraw?: boolean;
        };
        GachaDrawResponse: {
            /** @description ガチャで引いたカード */
            packs?: components["schemas"]["Pack"][];
        };
        PackPower: {
            /** @description 次のパックが貯まるまでの秒数 */
            next?: number;
            /** @description 現在溜まっているパックの数 */
            charged?: number;
        };
        /** @description ワザ */
        Skill: {
            /** @description ワザ名 */
            name?: string;
            /** @description ワザの説明 */
            text?: string;
            /** @description ダメージ */
            damage?: number;
            /** @description コスト */
            cost?: components["schemas"]["Element"][];
        };
        /** @description 特性 */
        Ability: {
            /** @description 特性名 */
            name?: string;
            /** @description 特性の説明 */
            description?: string;
        };
        MonsterCard: {
            /** @description 全ユーザーで一意に定まるID */
            readonly id?: string;
            /** @description カード名 */
            name?: string;
            /** @description レアリティ */
            rarity?: number;
            /** @description カードナンバー */
            cardNumber?: number;
            /** @description 拡張パック名 */
            expansion?: string;
            /**
             * @description カードタイプ
             * @enum {string}
             */
            cardType?: "Monster" | "Supporter" | "Goods";
            /**
             * Format: uri
             * @description カード画像URL
             */
            imageUrl?: string;
            /**
             * @description 進化段階 (たね, 1進化, 2進化)
             * @enum {string}
             */
            subType?: "Basic" | "Stage1" | "Stage2";
            type?: components["schemas"]["Element"];
            /** @description HP */
            hp?: number;
            /** @description ワザ */
            skills?: components["schemas"]["Skill"][];
            weekness?: components["schemas"]["Element"];
            /** @description にげるコスト */
            retreatCost?: number;
        };
        SupporterCard: {
            /** @description 効果 */
            effect?: string;
            /** @description 全ユーザーで一意に定まるID */
            readonly id?: string;
            /** @description カード名 */
            name?: string;
            /** @description レアリティ */
            rarity?: number;
            /** @description カードナンバー */
            cardNumber?: number;
            /** @description 拡張パック名 */
            expansion?: string;
            /**
             * @description カードタイプ
             * @enum {string}
             */
            cardType?: "Monster" | "Supporter" | "Goods";
            /**
             * Format: uri
             * @description カード画像URL
             */
            imageUrl?: string;
        };
        GoodsCard: {
            /** @description 効果 */
            effect?: string;
            /** @description 全ユーザーで一意に定まるID */
            readonly id?: string;
            /** @description カード名 */
            name?: string;
            /** @description レアリティ */
            rarity?: number;
            /** @description カードナンバー */
            cardNumber?: number;
            /** @description 拡張パック名 */
            expansion?: string;
            /**
             * @description カードタイプ
             * @enum {string}
             */
            cardType?: "Monster" | "Supporter" | "Goods";
            /**
             * Format: uri
             * @description カード画像URL
             */
            imageUrl?: string;
        };
        Card: components["schemas"]["MonsterCard"] | components["schemas"]["SupporterCard"] | components["schemas"]["GoodsCard"];
        User: {
            /** @description ユーザーID */
            readonly id?: string;
            /** @description ユーザー名 */
            name?: string;
        };
    };
    responses: never;
    parameters: never;
    requestBodies: never;
    headers: never;
    pathItems: never;
}
export type $defs = Record<string, never>;
export interface operations {
    getMyCardList: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description カード一覧 */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["Card"][];
                };
            };
        };
    };
    getMyCard: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description カード番号 */
                cardNumber: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description カード */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["Card"];
                };
            };
        };
    };
    getMyDeckList: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description デッキ一覧 */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["Deck"][];
                };
            };
        };
    };
    postMyDeck: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["Deck"];
            };
        };
        responses: {
            /** @description デッキ作成成功 */
            201: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    getMyDeck: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description デッキID */
                deckId: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description デッキ */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["Deck"];
                };
            };
        };
    };
    putMyDeck: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description デッキID */
                deckId: string;
            };
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["Deck"];
            };
        };
        responses: {
            /** @description デッキ作成成功 */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    getGachaList: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["Gacha"][];
                };
            };
        };
    };
    postGachaDraw: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description ガチャID */
                gachaId: string;
            };
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["GachaDrawRequest"];
            };
        };
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["GachaDrawResponse"];
                };
            };
        };
    };
    getMyItemList: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description アイテム一覧 */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["Item"][];
                };
            };
        };
    };
    getPackPower: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["PackPower"];
                };
            };
        };
    };
}
