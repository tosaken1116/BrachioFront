/* eslint-disable */

// @ts-nocheck

// noinspection JSUnusedGlobalSymbols

// This file was automatically generated by TanStack Router.
// You should NOT make any changes in this file as it will be overwritten.
// Additionally, you should also exclude this file from your linter and/or formatter to prevent it from being checked or modified.

// Import Routes

import { Route as rootRoute } from './routes/__root'
import { Route as IndexImport } from './routes/index'
import { Route as PresentsIndexImport } from './routes/presents/index'
import { Route as HomeIndexImport } from './routes/home/index'
import { Route as DecksIndexImport } from './routes/decks/index'
import { Route as CardsIndexImport } from './routes/cards/index'
import { Route as BattleIndexImport } from './routes/battle/index'
import { Route as DecksIdIndexImport } from './routes/decks/$id/index'

// Create/Update Routes

const IndexRoute = IndexImport.update({
  id: '/',
  path: '/',
  getParentRoute: () => rootRoute,
} as any)

const PresentsIndexRoute = PresentsIndexImport.update({
  id: '/presents/',
  path: '/presents/',
  getParentRoute: () => rootRoute,
} as any)

const HomeIndexRoute = HomeIndexImport.update({
  id: '/home/',
  path: '/home/',
  getParentRoute: () => rootRoute,
} as any)

const DecksIndexRoute = DecksIndexImport.update({
  id: '/decks/',
  path: '/decks/',
  getParentRoute: () => rootRoute,
} as any)

const CardsIndexRoute = CardsIndexImport.update({
  id: '/cards/',
  path: '/cards/',
  getParentRoute: () => rootRoute,
} as any)

const BattleIndexRoute = BattleIndexImport.update({
  id: '/battle/',
  path: '/battle/',
  getParentRoute: () => rootRoute,
} as any)

const DecksIdIndexRoute = DecksIdIndexImport.update({
  id: '/decks/$id/',
  path: '/decks/$id/',
  getParentRoute: () => rootRoute,
} as any)

// Populate the FileRoutesByPath interface

declare module '@tanstack/react-router' {
  interface FileRoutesByPath {
    '/': {
      id: '/'
      path: '/'
      fullPath: '/'
      preLoaderRoute: typeof IndexImport
      parentRoute: typeof rootRoute
    }
    '/battle/': {
      id: '/battle/'
      path: '/battle'
      fullPath: '/battle'
      preLoaderRoute: typeof BattleIndexImport
      parentRoute: typeof rootRoute
    }
    '/cards/': {
      id: '/cards/'
      path: '/cards'
      fullPath: '/cards'
      preLoaderRoute: typeof CardsIndexImport
      parentRoute: typeof rootRoute
    }
    '/decks/': {
      id: '/decks/'
      path: '/decks'
      fullPath: '/decks'
      preLoaderRoute: typeof DecksIndexImport
      parentRoute: typeof rootRoute
    }
    '/home/': {
      id: '/home/'
      path: '/home'
      fullPath: '/home'
      preLoaderRoute: typeof HomeIndexImport
      parentRoute: typeof rootRoute
    }
    '/presents/': {
      id: '/presents/'
      path: '/presents'
      fullPath: '/presents'
      preLoaderRoute: typeof PresentsIndexImport
      parentRoute: typeof rootRoute
    }
    '/decks/$id/': {
      id: '/decks/$id/'
      path: '/decks/$id'
      fullPath: '/decks/$id'
      preLoaderRoute: typeof DecksIdIndexImport
      parentRoute: typeof rootRoute
    }
  }
}

// Create and export the route tree

export interface FileRoutesByFullPath {
  '/': typeof IndexRoute
  '/battle': typeof BattleIndexRoute
  '/cards': typeof CardsIndexRoute
  '/decks': typeof DecksIndexRoute
  '/home': typeof HomeIndexRoute
  '/presents': typeof PresentsIndexRoute
  '/decks/$id': typeof DecksIdIndexRoute
}

export interface FileRoutesByTo {
  '/': typeof IndexRoute
  '/battle': typeof BattleIndexRoute
  '/cards': typeof CardsIndexRoute
  '/decks': typeof DecksIndexRoute
  '/home': typeof HomeIndexRoute
  '/presents': typeof PresentsIndexRoute
  '/decks/$id': typeof DecksIdIndexRoute
}

export interface FileRoutesById {
  __root__: typeof rootRoute
  '/': typeof IndexRoute
  '/battle/': typeof BattleIndexRoute
  '/cards/': typeof CardsIndexRoute
  '/decks/': typeof DecksIndexRoute
  '/home/': typeof HomeIndexRoute
  '/presents/': typeof PresentsIndexRoute
  '/decks/$id/': typeof DecksIdIndexRoute
}

export interface FileRouteTypes {
  fileRoutesByFullPath: FileRoutesByFullPath
  fullPaths:
    | '/'
    | '/battle'
    | '/cards'
    | '/decks'
    | '/home'
    | '/presents'
    | '/decks/$id'
  fileRoutesByTo: FileRoutesByTo
  to:
    | '/'
    | '/battle'
    | '/cards'
    | '/decks'
    | '/home'
    | '/presents'
    | '/decks/$id'
  id:
    | '__root__'
    | '/'
    | '/battle/'
    | '/cards/'
    | '/decks/'
    | '/home/'
    | '/presents/'
    | '/decks/$id/'
  fileRoutesById: FileRoutesById
}

export interface RootRouteChildren {
  IndexRoute: typeof IndexRoute
  BattleIndexRoute: typeof BattleIndexRoute
  CardsIndexRoute: typeof CardsIndexRoute
  DecksIndexRoute: typeof DecksIndexRoute
  HomeIndexRoute: typeof HomeIndexRoute
  PresentsIndexRoute: typeof PresentsIndexRoute
  DecksIdIndexRoute: typeof DecksIdIndexRoute
}

const rootRouteChildren: RootRouteChildren = {
  IndexRoute: IndexRoute,
  BattleIndexRoute: BattleIndexRoute,
  CardsIndexRoute: CardsIndexRoute,
  DecksIndexRoute: DecksIndexRoute,
  HomeIndexRoute: HomeIndexRoute,
  PresentsIndexRoute: PresentsIndexRoute,
  DecksIdIndexRoute: DecksIdIndexRoute,
}

export const routeTree = rootRoute
  ._addFileChildren(rootRouteChildren)
  ._addFileTypes<FileRouteTypes>()

/* ROUTE_MANIFEST_START
{
  "routes": {
    "__root__": {
      "filePath": "__root.tsx",
      "children": [
        "/",
        "/battle/",
        "/cards/",
        "/decks/",
        "/home/",
        "/presents/",
        "/decks/$id/"
      ]
    },
    "/": {
      "filePath": "index.tsx"
    },
    "/battle/": {
      "filePath": "battle/index.tsx"
    },
    "/cards/": {
      "filePath": "cards/index.tsx"
    },
    "/decks/": {
      "filePath": "decks/index.tsx"
    },
    "/home/": {
      "filePath": "home/index.tsx"
    },
    "/presents/": {
      "filePath": "presents/index.tsx"
    },
    "/decks/$id/": {
      "filePath": "decks/$id/index.tsx"
    }
  }
}
ROUTE_MANIFEST_END */
